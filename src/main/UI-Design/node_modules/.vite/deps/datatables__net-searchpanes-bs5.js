import {
  dataTables_bootstrap5_default
} from "./chunk-2NA3DSCH.js";
import {
  jquery_dataTables_default
} from "./chunk-LGSEUDT5.js";
import {
  require_jquery
} from "./chunk-OJSIUGB3.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/datatables.net-searchpanes-bs5/js/searchPanes.bootstrap5.mjs
var import_jquery2 = __toESM(require_jquery(), 1);

// node_modules/datatables.net-searchpanes/js/dataTables.searchPanes.mjs
var import_jquery = __toESM(require_jquery(), 1);
var $ = import_jquery.default;
(function() {
  "use strict";
  var $$5;
  var dataTable$2;
  function setJQuery$4(jq) {
    $$5 = jq;
    dataTable$2 = jq.fn.dataTable;
  }
  var SearchPane = (
    /** @class */
    function() {
      function SearchPane2(paneSettings, opts, index, panesContainer, panes) {
        var _this = this;
        if (panes === void 0) {
          panes = null;
        }
        if (!dataTable$2 || !dataTable$2.versionCheck || !dataTable$2.versionCheck("1.10.0")) {
          throw new Error("SearchPane requires DataTables 1.10 or newer");
        }
        if (!dataTable$2.select) {
          throw new Error("SearchPane requires Select");
        }
        var table = new dataTable$2.Api(paneSettings);
        this.classes = $$5.extend(true, {}, SearchPane2.classes);
        this.c = $$5.extend(true, {}, SearchPane2.defaults, opts, panes);
        if (opts && opts.hideCount && opts.viewCount === void 0) {
          this.c.viewCount = !this.c.hideCount;
        }
        var rowLength = table.columns().eq(0).toArray().length;
        this.s = {
          colExists: index < rowLength,
          colOpts: void 0,
          customPaneSettings: panes,
          displayed: false,
          dt: table,
          dtPane: void 0,
          firstSet: true,
          index,
          indexes: [],
          listSet: false,
          name: void 0,
          rowData: {
            arrayFilter: [],
            arrayOriginal: [],
            bins: {},
            binsOriginal: {},
            filterMap: /* @__PURE__ */ new Map(),
            totalOptions: 0
          },
          scrollTop: 0,
          searchFunction: void 0,
          selections: [],
          serverSelect: [],
          serverSelecting: false,
          tableLength: null,
          updating: false
        };
        this.s.colOpts = this.s.colExists ? this._getOptions() : this._getBonusOptions();
        this.dom = {
          buttonGroup: $$5("<div/>").addClass(this.classes.buttonGroup),
          clear: $$5('<button type="button">&#215;</button>').attr("disabled", "true").addClass(this.classes.disabledButton).addClass(this.classes.paneButton).addClass(this.classes.clearButton).html(this.s.dt.i18n("searchPanes.clearPane", this.c.i18n.clearPane)),
          collapseButton: $$5('<button type="button"><span class="' + this.classes.caret + '">&#x5e;</span></button>').addClass(this.classes.paneButton).addClass(this.classes.collapseButton),
          container: $$5("<div/>").addClass(this.classes.container).addClass(this.s.colOpts.className).addClass(this.classes.layout + (parseInt(this.c.layout.split("-")[1], 10) < 10 ? this.c.layout : this.c.layout.split("-")[0] + "-9")).addClass(this.s.customPaneSettings && this.s.customPaneSettings.className ? this.s.customPaneSettings.className : ""),
          countButton: $$5('<button type="button"><span></span></button>').addClass(this.classes.paneButton).addClass(this.classes.countButton),
          dtP: $$5("<table><thead><tr><th>" + (this.s.colExists ? $$5(this.s.dt.column(this.s.index).header()).text() : this.s.customPaneSettings.header || "Custom Pane") + "</th><th/></tr></thead></table>"),
          lower: $$5("<div/>").addClass(this.classes.subRow2).addClass(this.classes.narrowButton),
          nameButton: $$5('<button type="button"><span></span></button>').addClass(this.classes.paneButton).addClass(this.classes.nameButton),
          panesContainer: $$5(panesContainer),
          searchBox: $$5("<input/>").addClass(this.classes.paneInputButton).addClass(this.classes.search),
          searchButton: $$5('<button type="button"><span></span></button>').addClass(this.classes.searchIcon).addClass(this.classes.paneButton),
          searchCont: $$5("<div/>").addClass(this.classes.searchCont),
          searchLabelCont: $$5("<div/>").addClass(this.classes.searchLabelCont),
          topRow: $$5("<div/>").addClass(this.classes.topRow),
          upper: $$5("<div/>").addClass(this.classes.subRow1).addClass(this.classes.narrowSearch)
        };
        if (this.s.colOpts.name) {
          this.s.name = this.s.colOpts.name;
        } else if (this.s.customPaneSettings && this.s.customPaneSettings.name) {
          this.s.name = this.s.customPaneSettings.name;
        } else {
          this.s.name = this.s.colExists ? $$5(this.s.dt.column(this.s.index).header()).text() : this.s.customPaneSettings.header || "Custom Pane";
        }
        var tableNode = this.s.dt.table(0).node();
        this.s.searchFunction = function(settings, searchData, dataIndex) {
          if (_this.s.selections.length === 0) {
            return true;
          }
          if (settings.nTable !== tableNode) {
            return true;
          }
          var filter = null;
          if (_this.s.colExists) {
            filter = searchData[_this.s.index];
            if (_this.s.colOpts.orthogonal.filter !== "filter") {
              filter = _this.s.rowData.filterMap.get(dataIndex);
              if (filter instanceof $$5.fn.dataTable.Api) {
                filter = filter.toArray();
              }
            }
          }
          return _this._search(filter, dataIndex);
        };
        $$5.fn.dataTable.ext.search.push(this.s.searchFunction);
        if (this.c.clear) {
          this.dom.clear.on("click.dtsp", function() {
            var searches = _this.dom.container.find("." + _this.classes.search.replace(/\s+/g, "."));
            searches.each(function() {
              $$5(this).val("").trigger("input");
            });
            _this.clearPane();
          });
        }
        this.s.dt.on("draw.dtsp", function() {
          return _this.adjustTopRow();
        });
        this.s.dt.on("buttons-action.dtsp", function() {
          return _this.adjustTopRow();
        });
        this.s.dt.on("column-reorder.dtsp", function(e, settings, details) {
          _this.s.index = details.mapping[_this.s.index];
        });
        return this;
      }
      SearchPane2.prototype.addRow = function(display, filter, sort, type, className, total, shown) {
        if (!total) {
          total = this.s.rowData.bins[filter] ? this.s.rowData.bins[filter] : 0;
        }
        if (!shown) {
          shown = this._getShown(filter);
        }
        var index;
        for (var _i = 0, _a = this.s.indexes; _i < _a.length; _i++) {
          var entry = _a[_i];
          if (entry.filter === filter) {
            index = entry.index;
          }
        }
        if (index === void 0) {
          index = this.s.indexes.length;
          this.s.indexes.push({ filter, index });
        }
        return this.s.dtPane.row.add({
          className,
          display: display !== "" ? display : this.emptyMessage(),
          filter,
          index,
          shown,
          sort,
          total,
          type
        });
      };
      SearchPane2.prototype.adjustTopRow = function() {
        var subContainers = this.dom.container.find("." + this.classes.subRowsContainer.replace(/\s+/g, "."));
        var subRow1 = this.dom.container.find("." + this.classes.subRow1.replace(/\s+/g, "."));
        var subRow2 = this.dom.container.find("." + this.classes.subRow2.replace(/\s+/g, "."));
        var topRow = this.dom.container.find("." + this.classes.topRow.replace(/\s+/g, "."));
        if (($$5(subContainers[0]).width() < 252 || $$5(topRow[0]).width() < 252) && $$5(subContainers[0]).width() !== 0) {
          $$5(subContainers[0]).addClass(this.classes.narrow);
          $$5(subRow1[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowSearch);
          $$5(subRow2[0]).addClass(this.classes.narrowSub).removeClass(this.classes.narrowButton);
        } else {
          $$5(subContainers[0]).removeClass(this.classes.narrow);
          $$5(subRow1[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowSearch);
          $$5(subRow2[0]).removeClass(this.classes.narrowSub).addClass(this.classes.narrowButton);
        }
      };
      SearchPane2.prototype.clearData = function() {
        this.s.rowData = {
          arrayFilter: [],
          arrayOriginal: [],
          bins: {},
          binsOriginal: {},
          filterMap: /* @__PURE__ */ new Map(),
          totalOptions: 0
        };
      };
      SearchPane2.prototype.clearPane = function() {
        this.s.dtPane.rows({ selected: true }).deselect();
        this.updateTable();
        return this;
      };
      SearchPane2.prototype.collapse = function() {
        var _this = this;
        if (!this.s.displayed || // If collapsing is disabled globally, and not enabled specifically for this column
        (!this.c.collapse && this.s.colOpts.collapse !== true || // OR, collapsing could be enabled globally and this column specifically
        // is not to be collapsed.
        // We can't just take !this.s.colOpts.collapse here as if it is undefined
        // then the global should be used
        this.s.colOpts.collapse === false)) {
          return;
        }
        $$5(this.s.dtPane.table().container()).addClass(this.classes.hidden);
        this.dom.topRow.addClass(this.classes.bordered);
        this.dom.nameButton.addClass(this.classes.disabledButton);
        this.dom.countButton.addClass(this.classes.disabledButton);
        this.dom.searchButton.addClass(this.classes.disabledButton);
        this.dom.collapseButton.addClass(this.classes.rotated);
        this.dom.topRow.one("click.dtsp", function() {
          return _this.show();
        });
        this.dom.topRow.trigger("collapse.dtsps");
      };
      SearchPane2.prototype.destroy = function() {
        if (this.s.dtPane) {
          this.s.dtPane.off(".dtsp");
        }
        this.s.dt.off(".dtsp");
        this.dom.clear.off(".dtsp");
        this.dom.nameButton.off(".dtsp");
        this.dom.countButton.off(".dtsp");
        this.dom.searchButton.off(".dtsp");
        this.dom.collapseButton.off(".dtsp");
        $$5(this.s.dt.table().node()).off(".dtsp");
        this.dom.container.detach();
        var searchIdx = $$5.fn.dataTable.ext.search.indexOf(this.s.searchFunction);
        while (searchIdx !== -1) {
          $$5.fn.dataTable.ext.search.splice(searchIdx, 1);
          searchIdx = $$5.fn.dataTable.ext.search.indexOf(this.s.searchFunction);
        }
        if (this.s.dtPane) {
          this.s.dtPane.destroy();
        }
        this.s.listSet = false;
      };
      SearchPane2.prototype.emptyMessage = function() {
        var def = this.c.i18n.emptyMessage;
        if (this.c.emptyMessage) {
          def = this.c.emptyMessage;
        }
        if (this.s.colOpts.emptyMessage !== false && this.s.colOpts.emptyMessage !== null) {
          def = this.s.colOpts.emptyMessage;
        }
        return this.s.dt.i18n("searchPanes.emptyMessage", def);
      };
      SearchPane2.prototype.getPaneCount = function() {
        return this.s.dtPane ? this.s.dtPane.rows({ selected: true }).data().toArray().length : 0;
      };
      SearchPane2.prototype.rebuildPane = function(dataIn, maintainSelection) {
        if (dataIn === void 0) {
          dataIn = null;
        }
        if (maintainSelection === void 0) {
          maintainSelection = false;
        }
        this.clearData();
        var selectedRows = [];
        this.s.serverSelect = [];
        var prevEl = null;
        if (this.s.dtPane) {
          if (maintainSelection) {
            if (!this.s.dt.page.info().serverSide) {
              selectedRows = this.s.dtPane.rows({ selected: true }).data().toArray();
            } else {
              this.s.serverSelect = this.s.dtPane.rows({ selected: true }).data().toArray();
            }
          }
          this.s.dtPane.clear().destroy();
          prevEl = this.dom.container.prev();
          this.destroy();
          this.s.dtPane = void 0;
          $$5.fn.dataTable.ext.search.push(this.s.searchFunction);
        }
        this.dom.container.removeClass(this.classes.hidden);
        this.s.displayed = false;
        this._buildPane(!this.s.dt.page.info().serverSide ? selectedRows : this.s.serverSelect, dataIn, prevEl);
        return this;
      };
      SearchPane2.prototype.resize = function(layout) {
        this.c.layout = layout;
        this.dom.container.removeClass().addClass(this.classes.show).addClass(this.classes.container).addClass(this.s.colOpts.className).addClass(this.classes.layout + (parseInt(layout.split("-")[1], 10) < 10 ? layout : layout.split("-")[0] + "-9")).addClass(this.s.customPaneSettings !== null && this.s.customPaneSettings.className ? this.s.customPaneSettings.className : "");
        this.adjustTopRow();
      };
      SearchPane2.prototype.setListeners = function() {
        var _this = this;
        if (!this.s.dtPane) {
          return;
        }
        this.s.dtPane.off("select.dtsp").on("select.dtsp", function() {
          clearTimeout(_this.s.deselectTimeout);
          _this._updateSelection(!_this.s.updating);
          _this.dom.clear.removeClass(_this.classes.disabledButton).removeAttr("disabled");
        });
        this.s.dtPane.off("deselect.dtsp").on("deselect.dtsp", function() {
          _this.s.deselectTimeout = setTimeout(function() {
            _this._updateSelection(true);
            if (_this.s.dtPane.rows({ selected: true }).data().toArray().length === 0) {
              _this.dom.clear.addClass(_this.classes.disabledButton).attr("disabled", "true");
            }
          }, 50);
        });
        if (this.s.firstSet) {
          this.s.firstSet = false;
          this.s.dt.on("stateSaveParams.dtsp", function(e, settings, data) {
            if ($$5.isEmptyObject(data)) {
              _this.s.dtPane.state.clear();
              return;
            }
            var bins;
            var order;
            var selected = [];
            var collapsed;
            var searchTerm;
            var arrayFilter;
            if (_this.s.dtPane) {
              selected = _this.s.dtPane.rows({ selected: true }).data().map(function(item) {
                return item.filter.toString();
              }).toArray();
              searchTerm = _this.dom.searchBox.val();
              order = _this.s.dtPane.order();
              bins = _this.s.rowData.binsOriginal;
              arrayFilter = _this.s.rowData.arrayOriginal;
              collapsed = _this.dom.collapseButton.hasClass(_this.classes.rotated);
            }
            if (data.searchPanes === void 0) {
              data.searchPanes = {};
            }
            if (data.searchPanes.panes === void 0) {
              data.searchPanes.panes = [];
            }
            for (var i = 0; i < data.searchPanes.panes.length; i++) {
              if (data.searchPanes.panes[i].id === _this.s.index) {
                data.searchPanes.panes.splice(i, 1);
                i--;
              }
            }
            data.searchPanes.panes.push({
              arrayFilter,
              bins,
              collapsed,
              id: _this.s.index,
              order,
              searchTerm,
              selected
            });
          });
        }
        this.s.dtPane.off("user-select.dtsp").on("user-select.dtsp", function(e, _dt, type, cell, originalEvent) {
          originalEvent.stopPropagation();
        });
        this.s.dtPane.off("draw.dtsp").on("draw.dtsp", function() {
          return _this.adjustTopRow();
        });
        this.dom.nameButton.off("click.dtsp").on("click.dtsp", function() {
          var currentOrder = _this.s.dtPane.order()[0][1];
          _this.s.dtPane.order([0, currentOrder === "asc" ? "desc" : "asc"]).draw();
          _this.s.dt.state.save();
        });
        this.dom.countButton.off("click.dtsp").on("click.dtsp", function() {
          var currentOrder = _this.s.dtPane.order()[0][1];
          _this.s.dtPane.order([1, currentOrder === "asc" ? "desc" : "asc"]).draw();
          _this.s.dt.state.save();
        });
        this.dom.collapseButton.off("click.dtsp").on("click.dtsp", function(e) {
          e.stopPropagation();
          var container = $$5(_this.s.dtPane.table().container());
          container.toggleClass(_this.classes.hidden);
          _this.dom.topRow.toggleClass(_this.classes.bordered);
          _this.dom.nameButton.toggleClass(_this.classes.disabledButton);
          _this.dom.countButton.toggleClass(_this.classes.disabledButton);
          _this.dom.searchButton.toggleClass(_this.classes.disabledButton);
          _this.dom.collapseButton.toggleClass(_this.classes.rotated);
          if (container.hasClass(_this.classes.hidden)) {
            _this.dom.topRow.on("click.dtsp", function() {
              return _this.dom.collapseButton.click();
            });
          } else {
            _this.dom.topRow.off("click.dtsp");
          }
          _this.s.dt.state.save();
          _this.dom.topRow.trigger("collapse.dtsps");
        });
        this.dom.clear.off("click.dtsp").on("click.dtsp", function() {
          var searches = _this.dom.container.find("." + _this.classes.search.replace(/ /g, "."));
          searches.each(function() {
            $$5(this).val("").trigger("input");
          });
          _this.clearPane();
        });
        this.dom.searchButton.off("click.dtsp").on("click.dtsp", function() {
          return _this.dom.searchBox.focus();
        });
        this.dom.searchBox.off("click.dtsp").on("input.dtsp", function() {
          var searchval = _this.dom.searchBox.val();
          _this.s.dtPane.search(searchval).draw();
          if (typeof searchval === "string" && (searchval.length > 0 || searchval.length === 0 && _this.s.dtPane.rows({ selected: true }).data().toArray().length > 0)) {
            _this.dom.clear.removeClass(_this.classes.disabledButton).removeAttr("disabled");
          } else {
            _this.dom.clear.addClass(_this.classes.disabledButton).attr("disabled", "true");
          }
          _this.s.dt.state.save();
        });
        this.s.dtPane.select.style(this.s.colOpts.dtOpts && this.s.colOpts.dtOpts.select && this.s.colOpts.dtOpts.select.style ? this.s.colOpts.dtOpts.select.style : this.c.dtOpts && this.c.dtOpts.select && this.c.dtOpts.select.style ? this.c.dtOpts.select.style : "os");
      };
      SearchPane2.prototype._serverPopulate = function(dataIn) {
        if (dataIn.tableLength) {
          this.s.tableLength = dataIn.tableLength;
          this.s.rowData.totalOptions = this.s.tableLength;
        } else if (this.s.tableLength === null || this.s.dt.rows()[0].length > this.s.tableLength) {
          this.s.tableLength = this.s.dt.rows()[0].length;
          this.s.rowData.totalOptions = this.s.tableLength;
        }
        var colTitle = this.s.dt.column(this.s.index).dataSrc();
        if (dataIn.searchPanes.options[colTitle]) {
          for (var _i = 0, _a = dataIn.searchPanes.options[colTitle]; _i < _a.length; _i++) {
            var dataPoint = _a[_i];
            this.s.rowData.arrayFilter.push({
              display: dataPoint.label,
              filter: dataPoint.value,
              sort: dataPoint.label,
              type: dataPoint.label
            });
            this.s.rowData.bins[dataPoint.value] = dataPoint.total;
          }
        }
        var binLength = Object.keys(this.s.rowData.bins).length;
        var uniqueRatio = this._uniqueRatio(binLength, this.s.tableLength);
        if (this.s.displayed === false && ((this.s.colOpts.show === void 0 && this.s.colOpts.threshold === null ? uniqueRatio > this.c.threshold : uniqueRatio > this.s.colOpts.threshold) || this.s.colOpts.show !== true && binLength <= 1)) {
          this.dom.container.addClass(this.classes.hidden);
          this.s.displayed = false;
          return;
        }
        this.s.rowData.arrayOriginal = this.s.rowData.arrayFilter;
        this.s.rowData.binsOriginal = this.s.rowData.bins;
        this.s.displayed = true;
      };
      SearchPane2.prototype.show = function() {
        if (!this.s.displayed) {
          return;
        }
        this.dom.topRow.removeClass(this.classes.bordered);
        this.dom.nameButton.removeClass(this.classes.disabledButton);
        this.dom.countButton.removeClass(this.classes.disabledButton);
        this.dom.searchButton.removeClass(this.classes.disabledButton);
        this.dom.collapseButton.removeClass(this.classes.rotated);
        $$5(this.s.dtPane.table().container()).removeClass(this.classes.hidden);
        this.dom.topRow.trigger("collapse.dtsps");
      };
      SearchPane2.prototype._uniqueRatio = function(bins, rowCount) {
        if (rowCount > 0 && (this.s.rowData.totalOptions > 0 && !this.s.dt.page.info().serverSide || this.s.dt.page.info().serverSide && this.s.tableLength > 0)) {
          return bins / this.s.rowData.totalOptions;
        }
        return 1;
      };
      SearchPane2.prototype.updateTable = function() {
        var selectedRows = this.s.dtPane.rows({ selected: true }).data().toArray().map(function(el) {
          return el.filter;
        });
        this.s.selections = selectedRows;
        this._searchExtras();
      };
      SearchPane2.prototype._getComparisonRows = function() {
        var options = this.s.colOpts.options ? this.s.colOpts.options : this.s.customPaneSettings && this.s.customPaneSettings.options ? this.s.customPaneSettings.options : void 0;
        if (options === void 0) {
          return;
        }
        var allRows = this.s.dt.rows();
        var tableValsTotal = allRows.data().toArray();
        var rows = [];
        this.s.dtPane.clear();
        this.s.indexes = [];
        for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
          var comp = options_1[_i];
          var insert = comp.label !== "" ? comp.label : this.emptyMessage();
          var comparisonObj = {
            className: comp.className,
            display: insert,
            filter: typeof comp.value === "function" ? comp.value : [],
            sort: insert,
            total: 0,
            type: insert
          };
          if (typeof comp.value === "function") {
            for (var i = 0; i < tableValsTotal.length; i++) {
              if (comp.value.call(this.s.dt, tableValsTotal[i], allRows[0][i])) {
                comparisonObj.total++;
              }
            }
            if (typeof comparisonObj.filter !== "function") {
              comparisonObj.filter.push(comp.filter);
            }
          }
          rows.push(this.addRow(comparisonObj.display, comparisonObj.filter, comparisonObj.sort, comparisonObj.type, comparisonObj.className, comparisonObj.total));
        }
        return rows;
      };
      SearchPane2.prototype._getMessage = function(row) {
        return this.s.dt.i18n("searchPanes.count", this.c.i18n.count).replace(/{total}/g, row.total);
      };
      SearchPane2.prototype._getShown = function(filter) {
        return void 0;
      };
      SearchPane2.prototype._getPaneConfig = function() {
        var _this = this;
        var haveScroller = dataTable$2.Scroller;
        var langOpts = this.s.dt.settings()[0].oLanguage;
        langOpts.url = void 0;
        langOpts.sUrl = void 0;
        return {
          columnDefs: [
            {
              className: "dtsp-nameColumn",
              data: "display",
              render: function(data, type, row) {
                if (type === "sort") {
                  return row.sort;
                } else if (type === "type") {
                  return row.type;
                }
                var message = _this._getMessage(row);
                var pill = '<span class="' + _this.classes.pill + '">' + message + "</span>";
                if (!_this.c.viewCount || !_this.s.colOpts.viewCount) {
                  pill = "";
                }
                if (type === "filter") {
                  return typeof data === "string" && data.match(/<[^>]*>/) !== null ? data.replace(/<[^>]*>/g, "") : data;
                }
                return '<div class="' + _this.classes.nameCont + '"><span title="' + (typeof data === "string" && data.match(/<[^>]*>/) !== null ? data.replace(/<[^>]*>/g, "") : data) + '" class="' + _this.classes.name + '">' + data + "</span>" + pill + "</div>";
              },
              targets: 0,
              // Accessing the private datatables property to set type based on the original table.
              // This is null if not defined by the user, meaning that automatic type detection
              //  would take place
              type: this.s.dt.settings()[0].aoColumns[this.s.index] ? this.s.dt.settings()[0].aoColumns[this.s.index]._sManualType : null
            },
            {
              className: "dtsp-countColumn " + this.classes.badgePill,
              data: "total",
              searchable: false,
              targets: 1,
              visible: false
            }
          ],
          deferRender: true,
          dom: "t",
          info: false,
          language: langOpts,
          paging: haveScroller ? true : false,
          scrollX: false,
          scrollY: "200px",
          scroller: haveScroller ? true : false,
          select: true,
          stateSave: this.s.dt.settings()[0].oFeatures.bStateSave ? true : false
        };
      };
      SearchPane2.prototype._makeSelection = function() {
        this.updateTable();
        this.s.updating = true;
        this.s.dt.draw(false);
        this.s.updating = false;
      };
      SearchPane2.prototype._populatePaneArray = function(rowIdx, arrayFilter, settings, bins) {
        if (bins === void 0) {
          bins = this.s.rowData.bins;
        }
        if (typeof this.s.colOpts.orthogonal === "string") {
          var rendered = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, this.s.colOpts.orthogonal);
          this.s.rowData.filterMap.set(rowIdx, rendered);
          this._addOption(rendered, rendered, rendered, rendered, arrayFilter, bins);
          this.s.rowData.totalOptions++;
        } else {
          var filter = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, this.s.colOpts.orthogonal.search);
          if (filter === null) {
            filter = "";
          }
          if (typeof filter === "string") {
            filter = filter.replace(/<[^>]*>/g, "");
          }
          this.s.rowData.filterMap.set(rowIdx, filter);
          if (!bins[filter]) {
            bins[filter] = 1;
            this._addOption(filter, settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, this.s.colOpts.orthogonal.display), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, this.s.colOpts.orthogonal.sort), settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, this.s.colOpts.orthogonal.type), arrayFilter, bins);
            this.s.rowData.totalOptions++;
          } else {
            bins[filter]++;
            this.s.rowData.totalOptions++;
          }
        }
      };
      SearchPane2.prototype._reloadSelect = function(loadedFilter) {
        if (loadedFilter === void 0) {
          return;
        }
        var idx;
        for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {
          if (loadedFilter.searchPanes.panes[i].id === this.s.index) {
            idx = i;
            break;
          }
        }
        if (idx) {
          var table = this.s.dtPane;
          var rows = table.rows({ order: "index" }).data().map(function(item) {
            return item.filter !== null ? item.filter.toString() : null;
          }).toArray();
          for (var _i = 0, _a = loadedFilter.searchPanes.panes[idx].selected; _i < _a.length; _i++) {
            var filter = _a[_i];
            var id = -1;
            if (filter !== null) {
              id = rows.indexOf(filter.toString());
            }
            if (id > -1) {
              this.s.serverSelecting = true;
              table.row(id).select();
              this.s.serverSelecting = false;
            }
          }
        }
      };
      SearchPane2.prototype._updateSelection = function(notUpdating) {
        var _this = this;
        var settings = this.s.dt.settings()[0];
        var oApi = settings.oApi;
        var run = function() {
          _this.s.scrollTop = $$5(_this.s.dtPane.table().node()).parent()[0].scrollTop;
          if (_this.s.dt.page.info().serverSide && !_this.s.updating) {
            if (!_this.s.serverSelecting) {
              _this.s.serverSelect = _this.s.dtPane.rows({ selected: true }).data().toArray();
              _this.s.dt.draw(false);
            }
          } else if (notUpdating) {
            _this._makeSelection();
          }
          oApi._fnProcessingDisplay(settings, false);
        };
        if (settings.oFeatures.bProcessing) {
          oApi._fnProcessingDisplay(settings, true);
          setTimeout(run, 1);
        } else {
          run();
        }
      };
      SearchPane2.prototype._addOption = function(filter, display, sort, type, arrayFilter, bins) {
        if (Array.isArray(filter) || filter instanceof dataTable$2.Api) {
          if (filter instanceof dataTable$2.Api) {
            filter = filter.toArray();
            display = display.toArray();
          }
          if (filter.length === display.length) {
            for (var i = 0; i < filter.length; i++) {
              if (!bins[filter[i]]) {
                bins[filter[i]] = 1;
                arrayFilter.push({
                  display: display[i],
                  filter: filter[i],
                  sort: sort[i],
                  type: type[i]
                });
              } else {
                bins[filter[i]]++;
              }
              this.s.rowData.totalOptions++;
            }
            return;
          }
          throw new Error("display and filter not the same length");
        } else if (typeof this.s.colOpts.orthogonal === "string") {
          if (!bins[filter]) {
            bins[filter] = 1;
            arrayFilter.push({
              display,
              filter,
              sort,
              type
            });
            this.s.rowData.totalOptions++;
          } else {
            bins[filter]++;
            this.s.rowData.totalOptions++;
          }
        } else {
          arrayFilter.push({
            display,
            filter,
            sort,
            type
          });
        }
      };
      SearchPane2.prototype._buildPane = function(selectedRows, dataIn, prevEl) {
        var _this = this;
        if (selectedRows === void 0) {
          selectedRows = [];
        }
        if (dataIn === void 0) {
          dataIn = null;
        }
        if (prevEl === void 0) {
          prevEl = null;
        }
        this.s.selections = [];
        var loadedFilter = this.s.dt.state.loaded();
        if (this.s.listSet) {
          loadedFilter = this.s.dt.state();
        }
        if (this.s.colExists) {
          var idx = -1;
          if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes) {
            for (var i = 0; i < loadedFilter.searchPanes.panes.length; i++) {
              if (loadedFilter.searchPanes.panes[i].id === this.s.index) {
                idx = i;
                break;
              }
            }
          }
          if ((this.s.colOpts.show === false || this.s.colOpts.show !== void 0 && this.s.colOpts.show !== true) && idx === -1) {
            this.dom.container.addClass(this.classes.hidden);
            this.s.displayed = false;
            return false;
          } else if (this.s.colOpts.show === true || idx !== -1) {
            this.s.displayed = true;
          }
          if (!this.s.dt.page.info().serverSide && (!dataIn || !dataIn.searchPanes || !dataIn.searchPanes.options)) {
            if (this.s.rowData.arrayFilter.length === 0) {
              this.s.rowData.totalOptions = 0;
              this._populatePane();
              this.s.rowData.arrayOriginal = this.s.rowData.arrayFilter;
              this.s.rowData.binsOriginal = this.s.rowData.bins;
            }
            var binLength = Object.keys(this.s.rowData.binsOriginal).length;
            var uniqueRatio = this._uniqueRatio(binLength, this.s.dt.rows()[0].length);
            if (this.s.displayed === false && ((this.s.colOpts.show === void 0 && this.s.colOpts.threshold === null ? uniqueRatio > this.c.threshold : uniqueRatio > this.s.colOpts.threshold) || this.s.colOpts.show !== true && binLength <= 1)) {
              this.dom.container.addClass(this.classes.hidden);
              this.s.displayed = false;
              return;
            }
            this.dom.container.addClass(this.classes.show);
            this.s.displayed = true;
          } else if (dataIn && dataIn.searchPanes && dataIn.searchPanes.options) {
            this._serverPopulate(dataIn);
          }
        } else {
          this.s.displayed = true;
        }
        this._displayPane();
        if (!this.s.listSet) {
          this.dom.dtP.on("stateLoadParams.dtsp", function(e, settings, data) {
            if ($$5.isEmptyObject(_this.s.dt.state.loaded())) {
              $$5.each(data, function(index) {
                delete data[index];
              });
            }
          });
        }
        if (prevEl !== null && this.dom.panesContainer.has(prevEl).length > 0) {
          this.dom.container.insertAfter(prevEl);
        } else {
          this.dom.panesContainer.prepend(this.dom.container);
        }
        var errMode = $$5.fn.dataTable.ext.errMode;
        $$5.fn.dataTable.ext.errMode = "none";
        this.s.dtPane = this.dom.dtP.DataTable($$5.extend(true, this._getPaneConfig(), this.c.dtOpts, this.s.colOpts ? this.s.colOpts.dtOpts : {}, this.s.colOpts.options || !this.s.colExists ? {
          createdRow: function(row2, data) {
            $$5(row2).addClass(data.className);
          }
        } : void 0, this.s.customPaneSettings !== null && this.s.customPaneSettings.dtOpts ? this.s.customPaneSettings.dtOpts : {}, $$5.fn.dataTable.versionCheck("2") ? {
          layout: {
            bottomLeft: null,
            bottomRight: null,
            topLeft: null,
            topRight: null
          }
        } : {}));
        this.dom.dtP.addClass(this.classes.table);
        var headerText = "Custom Pane";
        if (this.s.customPaneSettings && this.s.customPaneSettings.header) {
          headerText = this.s.customPaneSettings.header;
        } else if (this.s.colOpts.header) {
          headerText = this.s.colOpts.header;
        } else if (this.s.colExists) {
          headerText = $$5.fn.dataTable.versionCheck("2") ? this.s.dt.column(this.s.index).title() : this.s.dt.settings()[0].aoColumns[this.s.index].sTitle;
        }
        headerText = this._escapeHTML(headerText);
        this.dom.searchBox.attr("placeholder", headerText);
        $$5.fn.dataTable.select.init(this.s.dtPane);
        $$5.fn.dataTable.ext.errMode = errMode;
        if (this.s.colExists) {
          for (var i = 0, ien = this.s.rowData.arrayFilter.length; i < ien; i++) {
            if (this.s.dt.page.info().serverSide) {
              var row = this.addRow(this.s.rowData.arrayFilter[i].display, this.s.rowData.arrayFilter[i].filter, this.s.rowData.arrayFilter[i].sort, this.s.rowData.arrayFilter[i].type);
              for (var _i = 0, _a = this.s.serverSelect; _i < _a.length; _i++) {
                var option = _a[_i];
                if (option.filter === this.s.rowData.arrayFilter[i].filter) {
                  this.s.serverSelecting = true;
                  row.select();
                  this.s.serverSelecting = false;
                }
              }
            } else if (!this.s.dt.page.info().serverSide && this.s.rowData.arrayFilter[i]) {
              this.addRow(this.s.rowData.arrayFilter[i].display, this.s.rowData.arrayFilter[i].filter, this.s.rowData.arrayFilter[i].sort, this.s.rowData.arrayFilter[i].type);
            } else if (!this.s.dt.page.info().serverSide) {
              this.addRow("", "", "", "");
            }
          }
        }
        dataTable$2.select.init(this.s.dtPane);
        if (this.s.colOpts.options || this.s.customPaneSettings && this.s.customPaneSettings.options) {
          this._getComparisonRows();
        }
        this.s.dtPane.draw();
        this.s.dtPane.table().node().parentNode.scrollTop = this.s.scrollTop;
        this.adjustTopRow();
        this.setListeners();
        this.s.listSet = true;
        for (var _b = 0, selectedRows_1 = selectedRows; _b < selectedRows_1.length; _b++) {
          var selection = selectedRows_1[_b];
          if (selection) {
            for (var _c = 0, _d = this.s.dtPane.rows().indexes().toArray(); _c < _d.length; _c++) {
              var row = _d[_c];
              if (this.s.dtPane.row(row).data() && selection.filter === this.s.dtPane.row(row).data().filter) {
                if (this.s.dt.page.info().serverSide) {
                  this.s.serverSelecting = true;
                  this.s.dtPane.row(row).select();
                  this.s.serverSelecting = false;
                } else {
                  this.s.dtPane.row(row).select();
                }
              }
            }
          }
        }
        if (this.s.dt.page.info().serverSide) {
          this.s.dtPane.search(this.dom.searchBox.val()).draw();
        }
        if ((this.c.initCollapsed && this.s.colOpts.initCollapsed !== false || this.s.colOpts.initCollapsed) && (this.c.collapse && this.s.colOpts.collapse !== false || this.s.colOpts.collapse)) {
          if (this.s.dtPane.settings()[0]._bInitComplete) {
            this.collapse();
          } else {
            this.s.dtPane.one("init", function() {
              return _this.collapse();
            });
          }
        }
        if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.panes && (!dataIn || dataIn.draw === 1)) {
          this._reloadSelect(loadedFilter);
          for (var _e = 0, _f = loadedFilter.searchPanes.panes; _e < _f.length; _e++) {
            var pane = _f[_e];
            if (pane.id === this.s.index) {
              if (pane.searchTerm && pane.searchTerm.length > 0) {
                this.dom.searchBox.val(pane.searchTerm).trigger("input");
              }
              if (pane.order) {
                this.s.dtPane.order(pane.order).draw();
              }
              if (pane.collapsed) {
                this.collapse();
              } else {
                this.show();
              }
            }
          }
        }
        return true;
      };
      SearchPane2.prototype._displayPane = function() {
        this.dom.dtP.empty();
        this.dom.topRow.empty().addClass(this.classes.topRow);
        if (parseInt(this.c.layout.split("-")[1], 10) > 3) {
          this.dom.container.addClass(this.classes.smallGap);
        }
        this.dom.topRow.addClass(this.classes.subRowsContainer).append(this.dom.upper.append(this.dom.searchCont)).append(this.dom.lower.append(this.dom.buttonGroup));
        if (this.c.dtOpts.searching === false || this.s.colOpts.dtOpts && this.s.colOpts.dtOpts.searching === false || (!this.c.controls || !this.s.colOpts.controls) || this.s.customPaneSettings && this.s.customPaneSettings.dtOpts && this.s.customPaneSettings.dtOpts.searching !== void 0 && !this.s.customPaneSettings.dtOpts.searching) {
          this.dom.searchBox.removeClass(this.classes.paneInputButton).addClass(this.classes.disabledButton).attr("disabled", "true");
        }
        this.dom.searchBox.appendTo(this.dom.searchCont);
        this._searchContSetup();
        if (this.c.clear && this.c.controls && this.s.colOpts.controls) {
          this.dom.clear.appendTo(this.dom.buttonGroup);
        }
        if (this.c.orderable && this.s.colOpts.orderable && this.c.controls && this.s.colOpts.controls) {
          this.dom.nameButton.appendTo(this.dom.buttonGroup);
        }
        if (this.c.viewCount && this.s.colOpts.viewCount && this.c.orderable && this.s.colOpts.orderable && this.c.controls && this.s.colOpts.controls) {
          this.dom.countButton.appendTo(this.dom.buttonGroup);
        }
        if ((this.c.collapse && this.s.colOpts.collapse !== false || this.s.colOpts.collapse) && this.c.controls && this.s.colOpts.controls) {
          this.dom.collapseButton.appendTo(this.dom.buttonGroup);
        }
        this.dom.container.prepend(this.dom.topRow).append(this.dom.dtP).show();
      };
      SearchPane2.prototype._escapeHTML = function(txt) {
        return txt.toString().replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"');
      };
      SearchPane2.prototype._getBonusOptions = function() {
        var defaultMutator = {
          threshold: null
        };
        return $$5.extend(true, {}, SearchPane2.defaults, defaultMutator, this.c ? this.c : {});
      };
      SearchPane2.prototype._getOptions = function() {
        var table = this.s.dt;
        var defaultMutator = {
          collapse: null,
          emptyMessage: false,
          initCollapsed: null,
          threshold: null
        };
        var columnOptions = table.settings()[0].aoColumns[this.s.index].searchPanes;
        var colOpts = $$5.extend(true, {}, SearchPane2.defaults, defaultMutator, columnOptions);
        if (columnOptions && columnOptions.hideCount && columnOptions.viewCount === void 0) {
          colOpts.viewCount = !columnOptions.hideCount;
        }
        return colOpts;
      };
      SearchPane2.prototype._populatePane = function() {
        this.s.rowData.arrayFilter = [];
        this.s.rowData.bins = {};
        var settings = this.s.dt.settings()[0];
        if (!this.s.dt.page.info().serverSide) {
          for (var _i = 0, _a = this.s.dt.rows().indexes().toArray(); _i < _a.length; _i++) {
            var index = _a[_i];
            this._populatePaneArray(index, this.s.rowData.arrayFilter, settings);
          }
        }
      };
      SearchPane2.prototype._search = function(filter, dataIndex) {
        var colOpts = this.s.colOpts;
        var table = this.s.dt;
        for (var _i = 0, _a = this.s.selections; _i < _a.length; _i++) {
          var colSelect = _a[_i];
          if (typeof colSelect === "string" && typeof filter === "string") {
            colSelect = this._escapeHTML(colSelect);
          }
          if (Array.isArray(filter)) {
            if (colOpts.combiner === "and") {
              if (!filter.includes(colSelect)) {
                return false;
              }
            } else if (filter.includes(colSelect)) {
              return true;
            }
          } else if (typeof colSelect === "function") {
            if (colSelect.call(table, table.row(dataIndex).data(), dataIndex)) {
              if (colOpts.combiner === "or") {
                return true;
              }
            } else if (colOpts.combiner === "and") {
              return false;
            }
          } else if (filter === colSelect || // Loose type checking incase number type in column comparing to a string
          // eslint-disable-next-line eqeqeq
          !(typeof filter === "string" && filter.length === 0) && filter == colSelect || colSelect === null && typeof filter === "string" && filter === "") {
            return true;
          }
        }
        if (colOpts.combiner === "and") {
          return true;
        }
        return false;
      };
      SearchPane2.prototype._searchContSetup = function() {
        if (this.c.controls && this.s.colOpts.controls) {
          this.dom.searchButton.appendTo(this.dom.searchLabelCont);
        }
        if (!(this.c.dtOpts.searching === false || this.s.colOpts.dtOpts.searching === false || this.s.customPaneSettings && this.s.customPaneSettings.dtOpts && this.s.customPaneSettings.dtOpts.searching !== void 0 && !this.s.customPaneSettings.dtOpts.searching)) {
          this.dom.searchLabelCont.appendTo(this.dom.searchCont);
        }
      };
      SearchPane2.prototype._searchExtras = function() {
        var updating = this.s.updating;
        this.s.updating = true;
        var filters = this.s.dtPane.rows({ selected: true }).data().pluck("filter").toArray();
        var nullIndex = filters.indexOf(this.emptyMessage());
        var container = $$5(this.s.dtPane.table().container());
        if (nullIndex > -1) {
          filters[nullIndex] = "";
        }
        if (filters.length > 0) {
          container.addClass(this.classes.selected);
        } else if (filters.length === 0) {
          container.removeClass(this.classes.selected);
        }
        this.s.updating = updating;
      };
      SearchPane2.version = "2.1.2";
      SearchPane2.classes = {
        bordered: "dtsp-bordered",
        buttonGroup: "dtsp-buttonGroup",
        buttonSub: "dtsp-buttonSub",
        caret: "dtsp-caret",
        clear: "dtsp-clear",
        clearAll: "dtsp-clearAll",
        clearButton: "clearButton",
        collapseAll: "dtsp-collapseAll",
        collapseButton: "dtsp-collapseButton",
        container: "dtsp-searchPane",
        countButton: "dtsp-countButton",
        disabledButton: "dtsp-disabledButton",
        hidden: "dtsp-hidden",
        hide: "dtsp-hide",
        layout: "dtsp-",
        name: "dtsp-name",
        nameButton: "dtsp-nameButton",
        nameCont: "dtsp-nameCont",
        narrow: "dtsp-narrow",
        paneButton: "dtsp-paneButton",
        paneInputButton: "dtsp-paneInputButton",
        pill: "dtsp-pill",
        rotated: "dtsp-rotated",
        search: "dtsp-search",
        searchCont: "dtsp-searchCont",
        searchIcon: "dtsp-searchIcon",
        searchLabelCont: "dtsp-searchButtonCont",
        selected: "dtsp-selected",
        smallGap: "dtsp-smallGap",
        subRow1: "dtsp-subRow1",
        subRow2: "dtsp-subRow2",
        subRowsContainer: "dtsp-subRowsContainer",
        title: "dtsp-title",
        topRow: "dtsp-topRow"
      };
      SearchPane2.defaults = {
        clear: true,
        collapse: true,
        combiner: "or",
        container: function(dt) {
          return dt.table().container();
        },
        controls: true,
        dtOpts: {},
        emptyMessage: null,
        hideCount: false,
        i18n: {
          clearPane: "&times;",
          count: "{total}",
          emptyMessage: "<em>No data</em>"
        },
        initCollapsed: false,
        layout: "auto",
        name: void 0,
        orderable: true,
        orthogonal: {
          display: "display",
          filter: "filter",
          hideCount: false,
          search: "filter",
          show: void 0,
          sort: "sort",
          threshold: 0.6,
          type: "type",
          viewCount: true
        },
        preSelect: [],
        threshold: 0.6,
        viewCount: true
      };
      return SearchPane2;
    }()
  );
  var __extends$4 = window && window.__extends || function() {
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  var SearchPaneST = (
    /** @class */
    function(_super) {
      __extends$4(SearchPaneST2, _super);
      function SearchPaneST2(paneSettings, opts, index, panesContainer, panes) {
        return _super.call(this, paneSettings, opts, index, panesContainer, panes) || this;
      }
      SearchPaneST2.prototype._serverPopulate = function(dataIn) {
        this.s.rowData.binsShown = {};
        this.s.rowData.arrayFilter = [];
        if (dataIn.tableLength !== void 0) {
          this.s.tableLength = dataIn.tableLength;
          this.s.rowData.totalOptions = this.s.tableLength;
        } else if (this.s.tableLength === null || this.s.dt.rows()[0].length > this.s.tableLength) {
          this.s.tableLength = this.s.dt.rows()[0].length;
          this.s.rowData.totalOptions = this.s.tableLength;
        }
        var colTitle = this.s.dt.column(this.s.index).dataSrc();
        if (dataIn.searchPanes.options[colTitle] !== void 0) {
          for (var _i = 0, _a = dataIn.searchPanes.options[colTitle]; _i < _a.length; _i++) {
            var dataPoint = _a[_i];
            this.s.rowData.arrayFilter.push({
              display: dataPoint.label,
              filter: dataPoint.value,
              shown: +dataPoint.count,
              sort: dataPoint.label,
              total: +dataPoint.total,
              type: dataPoint.label
            });
            this.s.rowData.binsShown[dataPoint.value] = +dataPoint.count;
            this.s.rowData.bins[dataPoint.value] = +dataPoint.total;
          }
        }
        var binLength = Object.keys(this.s.rowData.bins).length;
        var uniqueRatio = this._uniqueRatio(binLength, this.s.tableLength);
        if (!this.s.colOpts.show && this.s.displayed === false && ((this.s.colOpts.show === void 0 && this.s.colOpts.threshold === null ? uniqueRatio > this.c.threshold : uniqueRatio > this.s.colOpts.threshold) || this.s.colOpts.show !== true && binLength <= 1)) {
          this.dom.container.addClass(this.classes.hidden);
          this.s.displayed = false;
          return;
        }
        this.s.rowData.arrayOriginal = this.s.rowData.arrayFilter;
        this.s.rowData.binsOriginal = this.s.rowData.bins;
        this.s.displayed = true;
        if (this.s.dtPane) {
          var selected = this.s.serverSelect;
          this.s.dtPane.rows().remove();
          for (var _b = 0, _c = this.s.rowData.arrayFilter; _b < _c.length; _b++) {
            var data = _c[_b];
            if (this._shouldAddRow(data)) {
              var row = this.addRow(data.display, data.filter, data.sort, data.type);
              for (var i = 0; i < selected.length; i++) {
                var selection = selected[i];
                if (selection.filter === data.filter) {
                  this.s.serverSelecting = true;
                  row.select();
                  this.s.serverSelecting = false;
                  selected.splice(i, 1);
                  this.s.selections.push(data.filter);
                  break;
                }
              }
            }
          }
          for (var _d = 0, selected_1 = selected; _d < selected_1.length; _d++) {
            var selection = selected_1[_d];
            for (var _e = 0, _f = this.s.rowData.arrayOriginal; _e < _f.length; _e++) {
              var data = _f[_e];
              if (data.filter === selection.filter) {
                var row = this.addRow(data.display, data.filter, data.sort, data.type);
                this.s.serverSelecting = true;
                row.select();
                this.s.serverSelecting = false;
                this.s.selections.push(data.filter);
              }
            }
          }
          this.s.serverSelect = this.s.dtPane.rows({ selected: true }).data().toArray();
          this.s.dtPane.draw();
        }
      };
      SearchPaneST2.prototype.updateRows = function() {
        if (!this.s.dt.page.info().serverSide) {
          this.s.rowData.binsShown = {};
          for (var _i = 0, _a = this.s.dt.rows({ search: "applied" }).indexes().toArray(); _i < _a.length; _i++) {
            var index = _a[_i];
            this._updateShown(index, this.s.dt.settings()[0], this.s.rowData.binsShown);
          }
        }
        for (var _b = 0, _c = this.s.dtPane.rows().data().toArray(); _b < _c.length; _b++) {
          var row = _c[_b];
          row.shown = typeof this.s.rowData.binsShown[row.filter] === "number" ? this.s.rowData.binsShown[row.filter] : 0;
          this.s.dtPane.row(row.index).data(row);
        }
        this.s.dtPane.draw();
        this.s.dtPane.table().node().parentNode.scrollTop = this.s.scrollTop;
      };
      SearchPaneST2.prototype._makeSelection = function() {
        return;
      };
      SearchPaneST2.prototype._reloadSelect = function() {
        return;
      };
      SearchPaneST2.prototype._shouldAddRow = function(data) {
        return true;
      };
      SearchPaneST2.prototype._updateSelection = function() {
        if (this.s.dt.page.info().serverSide && !this.s.updating && !this.s.serverSelecting) {
          this.s.serverSelect = this.s.dtPane.rows({ selected: true }).data().toArray();
        }
      };
      SearchPaneST2.prototype._updateShown = function(rowIdx, settings, bins) {
        if (bins === void 0) {
          bins = this.s.rowData.binsShown;
        }
        var orth = typeof this.s.colOpts.orthogonal === "string" ? this.s.colOpts.orthogonal : this.s.colOpts.orthogonal.search;
        var filter = settings.oApi._fnGetCellData(settings, rowIdx, this.s.index, orth);
        var add = function(f2) {
          if (!bins[f2]) {
            bins[f2] = 1;
          } else {
            bins[f2]++;
          }
        };
        if (Array.isArray(filter)) {
          for (var _i = 0, filter_1 = filter; _i < filter_1.length; _i++) {
            var f = filter_1[_i];
            add(f);
          }
        } else {
          add(filter);
        }
      };
      return SearchPaneST2;
    }(SearchPane)
  );
  var __extends$3 = window && window.__extends || function() {
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  var $$4;
  function setJQuery$3(jq) {
    $$4 = jq;
  }
  var SearchPaneViewTotal = (
    /** @class */
    function(_super) {
      __extends$3(SearchPaneViewTotal2, _super);
      function SearchPaneViewTotal2(paneSettings, opts, index, panesContainer, panes) {
        var _this = this;
        var override = {
          i18n: {
            countFiltered: "{shown} ({total})"
          }
        };
        _this = _super.call(this, paneSettings, $$4.extend(override, opts), index, panesContainer, panes) || this;
        return _this;
      }
      SearchPaneViewTotal2.prototype._getMessage = function(row) {
        var countMessage = this.s.dt.i18n("searchPanes.count", this.c.i18n.count);
        var filteredMessage = this.s.dt.i18n("searchPanes.countFiltered", this.c.i18n.countFiltered);
        return (this.s.filteringActive ? filteredMessage : countMessage).replace(/{total}/g, row.total).replace(/{shown}/g, row.shown);
      };
      SearchPaneViewTotal2.prototype._getShown = function(filter) {
        return this.s.rowData.binsShown && this.s.rowData.binsShown[filter] ? this.s.rowData.binsShown[filter] : 0;
      };
      return SearchPaneViewTotal2;
    }(SearchPaneST)
  );
  var __extends$2 = window && window.__extends || function() {
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  var $$3;
  function setJQuery$2(jq) {
    $$3 = jq;
  }
  var SearchPaneCascade = (
    /** @class */
    function(_super) {
      __extends$2(SearchPaneCascade2, _super);
      function SearchPaneCascade2(paneSettings, opts, index, panesContainer, panes) {
        var _this = this;
        var override = {
          i18n: {
            count: "{shown}"
          }
        };
        _this = _super.call(this, paneSettings, $$3.extend(override, opts), index, panesContainer, panes) || this;
        return _this;
      }
      SearchPaneCascade2.prototype.updateRows = function() {
        var selected = this.s.dtPane.rows({ selected: true }).data().toArray();
        if (this.s.colOpts.options || this.s.customPaneSettings && this.s.customPaneSettings.options) {
          this._getComparisonRows();
          var rows = this.s.dtPane.rows().toArray()[0];
          for (var i = 0; i < rows.length; i++) {
            var row = this.s.dtPane.row(rows[i]);
            var rowData = row.data();
            if (rowData === void 0) {
              continue;
            }
            if (rowData.shown === 0) {
              row.remove();
              rows = this.s.dtPane.rows().toArray()[0];
              i--;
              continue;
            }
            for (var _i = 0, selected_1 = selected; _i < selected_1.length; _i++) {
              var selection = selected_1[_i];
              if (rowData.filter === selection.filter) {
                row.select();
                selected.splice(i, 1);
                this.s.selections.push(rowData.filter);
                break;
              }
            }
          }
        } else {
          if (!this.s.dt.page.info().serverSide) {
            this._activePopulatePane();
            this.s.rowData.binsShown = {};
            for (var _a = 0, _b = this.s.dt.rows({ search: "applied" }).indexes().toArray(); _a < _b.length; _a++) {
              var index = _b[_a];
              this._updateShown(index, this.s.dt.settings()[0], this.s.rowData.binsShown);
            }
          }
          this.s.dtPane.rows().remove();
          for (var _c = 0, _d = this.s.rowData.arrayFilter; _c < _d.length; _c++) {
            var data = _d[_c];
            if (data.shown === 0) {
              continue;
            }
            var row = this.addRow(data.display, data.filter, data.sort, data.type, void 0);
            for (var i = 0; i < selected.length; i++) {
              var selection = selected[i];
              if (selection.filter === data.filter) {
                row.select();
                selected.splice(i, 1);
                this.s.selections.push(data.filter);
                break;
              }
            }
          }
          for (var _e = 0, selected_2 = selected; _e < selected_2.length; _e++) {
            var selection = selected_2[_e];
            for (var _f = 0, _g = this.s.rowData.arrayOriginal; _f < _g.length; _f++) {
              var data = _g[_f];
              if (data.filter === selection.filter) {
                var row = this.addRow(data.display, data.filter, data.sort, data.type, void 0);
                row.select();
                this.s.selections.push(data.filter);
              }
            }
          }
        }
        this.s.dtPane.draw();
        this.s.dtPane.table().node().parentNode.scrollTop = this.s.scrollTop;
        if (!this.s.dt.page.info().serverSide) {
          this.s.dt.draw(false);
        }
      };
      SearchPaneCascade2.prototype._activePopulatePane = function() {
        this.s.rowData.arrayFilter = [];
        this.s.rowData.bins = {};
        var settings = this.s.dt.settings()[0];
        if (!this.s.dt.page.info().serverSide) {
          for (var _i = 0, _a = this.s.dt.rows({ search: "applied" }).indexes().toArray(); _i < _a.length; _i++) {
            var index = _a[_i];
            this._populatePaneArray(index, this.s.rowData.arrayFilter, settings);
          }
        }
      };
      SearchPaneCascade2.prototype._getComparisonRows = function() {
        var options = this.s.colOpts.options ? this.s.colOpts.options : this.s.customPaneSettings && this.s.customPaneSettings.options ? this.s.customPaneSettings.options : void 0;
        if (options === void 0) {
          return;
        }
        var allRows = this.s.dt.rows();
        var shownRows = this.s.dt.rows({ search: "applied" });
        var tableValsTotal = allRows.data().toArray();
        var tableValsShown = shownRows.data().toArray();
        var rows = [];
        this.s.dtPane.clear();
        this.s.indexes = [];
        for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
          var comp = options_1[_i];
          var insert = comp.label !== "" ? comp.label : this.emptyMessage();
          var comparisonObj = {
            className: comp.className,
            display: insert,
            filter: typeof comp.value === "function" ? comp.value : [],
            shown: 0,
            sort: insert,
            total: 0,
            type: insert
          };
          if (typeof comp.value === "function") {
            for (var i = 0; i < tableValsTotal.length; i++) {
              if (comp.value.call(this.s.dt, tableValsTotal[i], allRows[0][i])) {
                comparisonObj.total++;
              }
            }
            for (var i = 0; i < tableValsShown.length; i++) {
              if (comp.value.call(this.s.dt, tableValsShown[i], shownRows[0][i])) {
                comparisonObj.shown++;
              }
            }
            if (typeof comparisonObj.filter !== "function") {
              comparisonObj.filter.push(comp.filter);
            }
          }
          rows.push(this.addRow(comparisonObj.display, comparisonObj.filter, comparisonObj.sort, comparisonObj.type, comparisonObj.className, comparisonObj.total, comparisonObj.shown));
        }
        return rows;
      };
      SearchPaneCascade2.prototype._getMessage = function(row) {
        return this.s.dt.i18n("searchPanes.count", this.c.i18n.count).replace(/{total}/g, row.total).replace(/{shown}/g, row.shown);
      };
      SearchPaneCascade2.prototype._getShown = function(filter) {
        return this.s.rowData.binsShown && this.s.rowData.binsShown[filter] ? this.s.rowData.binsShown[filter] : 0;
      };
      SearchPaneCascade2.prototype._shouldAddRow = function(data) {
        return data.shown > 0;
      };
      return SearchPaneCascade2;
    }(SearchPaneST)
  );
  var __extends$1 = window && window.__extends || function() {
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  var $$2;
  function setJQuery$1(jq) {
    $$2 = jq;
  }
  var SearchPaneCascadeViewTotal = (
    /** @class */
    function(_super) {
      __extends$1(SearchPaneCascadeViewTotal2, _super);
      function SearchPaneCascadeViewTotal2(paneSettings, opts, index, panesContainer, panes) {
        var _this = this;
        var override = {
          i18n: {
            count: "{total}",
            countFiltered: "{shown} ({total})"
          }
        };
        _this = _super.call(this, paneSettings, $$2.extend(override, opts), index, panesContainer, panes) || this;
        return _this;
      }
      SearchPaneCascadeViewTotal2.prototype._activePopulatePane = function() {
        this.s.rowData.arrayFilter = [];
        this.s.rowData.binsShown = {};
        var settings = this.s.dt.settings()[0];
        if (!this.s.dt.page.info().serverSide) {
          for (var _i = 0, _a = this.s.dt.rows({ search: "applied" }).indexes().toArray(); _i < _a.length; _i++) {
            var index = _a[_i];
            this._populatePaneArray(index, this.s.rowData.arrayFilter, settings, this.s.rowData.binsShown);
          }
        }
      };
      SearchPaneCascadeViewTotal2.prototype._getMessage = function(row) {
        var countMessage = this.s.dt.i18n("searchPanes.count", this.c.i18n.count);
        var filteredMessage = this.s.dt.i18n("searchPanes.countFiltered", this.c.i18n.countFiltered);
        return (this.s.filteringActive ? filteredMessage : countMessage).replace(/{total}/g, row.total).replace(/{shown}/g, row.shown);
      };
      return SearchPaneCascadeViewTotal2;
    }(SearchPaneCascade)
  );
  var $$1;
  var dataTable$1;
  function setJQuery(jq) {
    $$1 = jq;
    dataTable$1 = jq.fn.dataTable;
  }
  var SearchPanes = (
    /** @class */
    function() {
      function SearchPanes2(paneSettings, opts, fromPreInit, paneClass) {
        var _this = this;
        if (fromPreInit === void 0) {
          fromPreInit = false;
        }
        if (paneClass === void 0) {
          paneClass = SearchPane;
        }
        if (!dataTable$1 || !dataTable$1.versionCheck || !dataTable$1.versionCheck("1.10.0")) {
          throw new Error("SearchPane requires DataTables 1.10 or newer");
        }
        if (!dataTable$1.select) {
          throw new Error("SearchPane requires Select");
        }
        var table = new dataTable$1.Api(paneSettings);
        this.classes = $$1.extend(true, {}, SearchPanes2.classes);
        this.c = $$1.extend(true, {}, SearchPanes2.defaults, opts);
        this.dom = {
          clearAll: $$1('<button type="button"/>').addClass(this.classes.clearAll).html(table.i18n("searchPanes.clearMessage", this.c.i18n.clearMessage)),
          collapseAll: $$1('<button type="button"/>').addClass(this.classes.collapseAll).html(table.i18n("searchPanes.collapseMessage", this.c.i18n.collapseMessage)),
          container: $$1("<div/>").addClass(this.classes.panes).html(table.i18n("searchPanes.loadMessage", this.c.i18n.loadMessage)),
          emptyMessage: $$1("<div/>").addClass(this.classes.emptyMessage),
          panes: $$1("<div/>").addClass(this.classes.container),
          showAll: $$1('<button type="button"/>').addClass(this.classes.showAll).addClass(this.classes.disabledButton).attr("disabled", "true").html(table.i18n("searchPanes.showMessage", this.c.i18n.showMessage)),
          title: $$1("<div/>").addClass(this.classes.title),
          titleRow: $$1("<div/>").addClass(this.classes.titleRow)
        };
        this.s = {
          colOpts: [],
          dt: table,
          filterCount: 0,
          minPaneWidth: 260,
          page: 0,
          paging: false,
          pagingST: false,
          paneClass,
          panes: [],
          selectionList: [],
          serverData: {},
          stateRead: false,
          updating: false
        };
        if (table.settings()[0]._searchPanes) {
          return;
        }
        this._getState();
        if (this.s.dt.page.info().serverSide) {
          var hostSettings = this.s.dt.settings()[0];
          this.s.dt.on("preXhr.dtsps", function(e, settings, data) {
            if (hostSettings !== settings) {
              return;
            }
            if (data.searchPanes === void 0) {
              data.searchPanes = {};
            }
            if (data.searchPanes_null === void 0) {
              data.searchPanes_null = {};
            }
            var src;
            for (var _i = 0, _a = _this.s.selectionList; _i < _a.length; _i++) {
              var selection = _a[_i];
              src = _this.s.dt.column(selection.column).dataSrc();
              if (data.searchPanes[src] === void 0) {
                data.searchPanes[src] = {};
              }
              if (data.searchPanes_null[src] === void 0) {
                data.searchPanes_null[src] = {};
              }
              for (var i = 0; i < selection.rows.length; i++) {
                data.searchPanes[src][i] = selection.rows[i];
                if (data.searchPanes[src][i] === null) {
                  data.searchPanes_null[src][i] = true;
                }
              }
            }
            if (_this.s.selectionList.length > 0) {
              data.searchPanesLast = src;
            }
            data.searchPanes_options = {
              cascade: _this.c.cascadePanes,
              viewCount: _this.c.viewCount,
              viewTotal: _this.c.viewTotal
            };
          });
        }
        this._setXHR();
        table.settings()[0]._searchPanes = this;
        if (this.s.dt.settings()[0]._bInitComplete || fromPreInit) {
          this._paneDeclare(table, paneSettings, opts);
        } else {
          table.one("preInit.dtsps", function() {
            _this._paneDeclare(table, paneSettings, opts);
          });
        }
        return this;
      }
      SearchPanes2.prototype.clearSelections = function() {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.dtPane) {
            pane.s.scrollTop = pane.s.dtPane.table().node().parentNode.scrollTop;
          }
        }
        var searches = this.dom.container.find("." + this.classes.search.replace(/\s+/g, "."));
        searches.each(function() {
          $$1(this).val("").trigger("input");
        });
        this.s.selectionList = [];
        var returnArray = [];
        for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {
          var pane = _c[_b];
          if (pane.s.dtPane) {
            returnArray.push(pane.clearPane());
          }
        }
        return returnArray;
      };
      SearchPanes2.prototype.getNode = function() {
        return this.dom.container;
      };
      SearchPanes2.prototype.rebuild = function(targetIdx, maintainSelection) {
        if (targetIdx === void 0) {
          targetIdx = false;
        }
        if (maintainSelection === void 0) {
          maintainSelection = false;
        }
        this.dom.emptyMessage.detach();
        if (targetIdx === false) {
          this.dom.panes.empty();
        }
        var returnArray = [];
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (targetIdx === false || pane.s.index === targetIdx) {
            pane.clearData();
            pane.rebuildPane(this.s.dt.page.info().serverSide ? this.s.serverData : void 0, maintainSelection);
            this.dom.panes.append(pane.dom.container);
            returnArray.push(pane);
          }
        }
        this._updateSelection();
        this._updateFilterCount();
        this._attachPaneContainer();
        this._initSelectionListeners(false);
        this.s.dt.draw(!maintainSelection);
        this.resizePanes();
        return returnArray.length === 1 ? returnArray[0] : returnArray;
      };
      SearchPanes2.prototype.resizePanes = function() {
        if (this.c.layout === "auto") {
          var contWidth = $$1(this.s.dt.searchPanes.container()).width();
          var target = Math.floor(contWidth / this.s.minPaneWidth);
          var highest_1 = 1;
          var highestmod_1 = 0;
          var dispIndex = [];
          for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
            var pane = _a[_i];
            if (pane.s.displayed) {
              dispIndex.push(pane.s.index);
            }
          }
          var displayCount = dispIndex.length;
          if (target === displayCount) {
            highest_1 = target;
          } else {
            for (var ppr = target; ppr > 1; ppr--) {
              var rem = displayCount % ppr;
              if (rem === 0) {
                highest_1 = ppr;
                highestmod_1 = 0;
                break;
              } else if (rem > highestmod_1) {
                highest_1 = ppr;
                highestmod_1 = rem;
              }
            }
          }
          var widerIndexes_1 = highestmod_1 !== 0 ? dispIndex.slice(dispIndex.length - highestmod_1, dispIndex.length) : [];
          this.s.panes.forEach(function(pane2) {
            if (pane2.s.displayed) {
              pane2.resize("columns-" + (!widerIndexes_1.includes(pane2.s.index) ? highest_1 : highestmod_1));
            }
          });
        } else {
          for (var _b = 0, _c = this.s.panes; _b < _c.length; _b++) {
            var pane = _c[_b];
            pane.adjustTopRow();
          }
        }
        return this;
      };
      SearchPanes2.prototype._initSelectionListeners = function(isPreselect) {
        return;
      };
      SearchPanes2.prototype._serverTotals = function() {
        return;
      };
      SearchPanes2.prototype._setXHR = function() {
        var _this = this;
        var hostSettings = this.s.dt.settings()[0];
        var run = function(json) {
          if (json && json.searchPanes && json.searchPanes.options) {
            _this.s.serverData = json;
            _this.s.serverData.tableLength = json.recordsTotal;
            _this._serverTotals();
          }
        };
        this.s.dt.on("xhr.dtsps", function(e, settings, json) {
          if (hostSettings === settings) {
            run(json);
          }
        });
        run(this.s.dt.ajax.json());
      };
      SearchPanes2.prototype._stateLoadListener = function() {
        var _this = this;
        var hostSettings = this.s.dt.settings()[0];
        this.s.dt.on("stateLoadParams.dtsps", function(e, settings, data) {
          if (data.searchPanes === void 0 || settings !== hostSettings) {
            return;
          }
          _this.clearSelections();
          _this.s.selectionList = data.searchPanes.selectionList ? data.searchPanes.selectionList : [];
          if (data.searchPanes.panes) {
            for (var _i = 0, _a = data.searchPanes.panes; _i < _a.length; _i++) {
              var loadedPane = _a[_i];
              for (var _b = 0, _c = _this.s.panes; _b < _c.length; _b++) {
                var pane = _c[_b];
                if (loadedPane.id === pane.s.index && pane.s.dtPane) {
                  pane.dom.searchBox.val(loadedPane.searchTerm);
                  pane.s.dtPane.order(loadedPane.order);
                }
              }
            }
          }
          _this._makeSelections(_this.s.selectionList);
        });
      };
      SearchPanes2.prototype._updateSelection = function() {
        this.s.selectionList = [];
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.dtPane) {
            var rows = pane.s.dtPane.rows({ selected: true }).data().toArray().map(function(el) {
              return el.filter;
            });
            if (rows.length) {
              this.s.selectionList.push({
                column: pane.s.index,
                rows
              });
            }
          }
        }
      };
      SearchPanes2.prototype._attach = function() {
        var _this = this;
        this.dom.titleRow.removeClass(this.classes.hide).detach().append(this.dom.title);
        if (this.c.clear) {
          this.dom.clearAll.appendTo(this.dom.titleRow).on("click.dtsps", function() {
            return _this.clearSelections();
          });
        }
        if (this.c.collapse) {
          this.dom.showAll.appendTo(this.dom.titleRow);
          this.dom.collapseAll.appendTo(this.dom.titleRow);
          this._setCollapseListener();
        }
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          this.dom.panes.append(pane.dom.container);
        }
        this.dom.container.text("").removeClass(this.classes.hide).append(this.dom.titleRow).append(this.dom.panes);
        this.s.panes.forEach(function(pane2) {
          return pane2.setListeners();
        });
        if ($$1("div." + this.classes.container).length === 0) {
          this.dom.container.prependTo(this.s.dt);
        }
      };
      SearchPanes2.prototype._attachMessage = function() {
        var message;
        try {
          message = this.s.dt.i18n("searchPanes.emptyPanes", this.c.i18n.emptyPanes);
        } catch (error) {
          message = null;
        }
        if (message === null) {
          this.dom.container.addClass(this.classes.hide);
          this.dom.titleRow.removeClass(this.classes.hide);
          return;
        }
        this.dom.container.removeClass(this.classes.hide);
        this.dom.titleRow.addClass(this.classes.hide);
        this.dom.emptyMessage.html(message).appendTo(this.dom.container);
      };
      SearchPanes2.prototype._attachPaneContainer = function() {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.displayed === true) {
            this._attach();
            return;
          }
        }
        this._attachMessage();
      };
      SearchPanes2.prototype._checkCollapse = function() {
        var disableClose = true;
        var disableShow = true;
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.displayed) {
            if (!pane.dom.collapseButton.hasClass(pane.classes.rotated)) {
              this.dom.collapseAll.removeClass(this.classes.disabledButton).removeAttr("disabled");
              disableClose = false;
            } else {
              this.dom.showAll.removeClass(this.classes.disabledButton).removeAttr("disabled");
              disableShow = false;
            }
          }
        }
        if (disableClose) {
          this.dom.collapseAll.addClass(this.classes.disabledButton).attr("disabled", "true");
        }
        if (disableShow) {
          this.dom.showAll.addClass(this.classes.disabledButton).attr("disabled", "true");
        }
      };
      SearchPanes2.prototype._checkMessage = function() {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.displayed === true) {
            this.dom.emptyMessage.detach();
            this.dom.titleRow.removeClass(this.classes.hide);
            return;
          }
        }
        this._attachMessage();
      };
      SearchPanes2.prototype._collapseAll = function() {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          pane.collapse();
        }
      };
      SearchPanes2.prototype._findPane = function(name) {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (name === pane.s.name) {
            return pane;
          }
        }
      };
      SearchPanes2.prototype._getState = function() {
        var loadedFilter = this.s.dt.state.loaded();
        if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.selectionList) {
          this.s.selectionList = loadedFilter.searchPanes.selectionList;
        }
      };
      SearchPanes2.prototype._makeSelections = function(selectList) {
        for (var _i = 0, selectList_1 = selectList; _i < selectList_1.length; _i++) {
          var selection = selectList_1[_i];
          var pane = void 0;
          for (var _a = 0, _b = this.s.panes; _a < _b.length; _a++) {
            var p = _b[_a];
            if (p.s.index === selection.column) {
              pane = p;
              break;
            }
          }
          if (pane && pane.s.dtPane) {
            for (var j = 0; j < pane.s.dtPane.rows().data().toArray().length; j++) {
              if (selection.rows.includes(typeof pane.s.dtPane.row(j).data().filter === "function" ? pane.s.dtPane.cell(j, 0).data() : pane.s.dtPane.row(j).data().filter)) {
                pane.s.dtPane.row(j).select();
              }
            }
            pane.updateTable();
          }
        }
      };
      SearchPanes2.prototype._paneDeclare = function(table, paneSettings, opts) {
        var _this = this;
        table.columns(this.c.columns.length > 0 ? this.c.columns : void 0).eq(0).each(function(idx) {
          _this.s.panes.push(new _this.s.paneClass(paneSettings, opts, idx, _this.dom.panes));
        });
        var colCount = table.columns().eq(0).toArray().length;
        for (var i = 0; i < this.c.panes.length; i++) {
          var id = colCount + i;
          this.s.panes.push(new this.s.paneClass(paneSettings, opts, id, this.dom.panes, this.c.panes[i]));
        }
        if (this.c.order.length > 0) {
          this.s.panes = this.c.order.map(function(name) {
            return _this._findPane(name);
          });
        }
        if (this.s.dt.settings()[0]._bInitComplete) {
          this._startup(table);
        } else {
          this.s.dt.settings()[0].aoInitComplete.push({
            fn: function() {
              return _this._startup(table);
            }
          });
        }
      };
      SearchPanes2.prototype._setCollapseListener = function() {
        var _this = this;
        this.dom.collapseAll.on("click.dtsps", function() {
          _this._collapseAll();
          _this.dom.collapseAll.addClass(_this.classes.disabledButton).attr("disabled", "true");
          _this.dom.showAll.removeClass(_this.classes.disabledButton).removeAttr("disabled");
          _this.s.dt.state.save();
        });
        this.dom.showAll.on("click.dtsps", function() {
          _this._showAll();
          _this.dom.showAll.addClass(_this.classes.disabledButton).attr("disabled", "true");
          _this.dom.collapseAll.removeClass(_this.classes.disabledButton).removeAttr("disabled");
          _this.s.dt.state.save();
        });
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          pane.dom.topRow.on("collapse.dtsps", function() {
            return _this._checkCollapse();
          });
        }
        this._checkCollapse();
      };
      SearchPanes2.prototype._showAll = function() {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          pane.show();
        }
      };
      SearchPanes2.prototype._startup = function(table) {
        var _this = this;
        this._attach();
        this.dom.panes.empty();
        var hostSettings = this.s.dt.settings()[0];
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          pane.rebuildPane(Object.keys(this.s.serverData).length > 0 ? this.s.serverData : void 0);
          this.dom.panes.append(pane.dom.container);
        }
        if (this.c.layout === "auto") {
          this.resizePanes();
        }
        var loadedFilter = this.s.dt.state.loaded();
        if (!this.s.stateRead && loadedFilter) {
          this.s.dt.page(loadedFilter.start / this.s.dt.page.len()).draw("page");
        }
        this.s.stateRead = true;
        this._checkMessage();
        table.on("preDraw.dtsps", function() {
          if (!_this.s.updating && !_this.s.paging) {
            _this._updateFilterCount();
            _this._updateSelection();
          }
          _this.s.paging = false;
        });
        $$1(window).on("resize.dtsps", dataTable$1.util.throttle(function() {
          return _this.resizePanes();
        }));
        this.s.dt.on("stateSaveParams.dtsps", function(e, settings, data) {
          if (settings !== hostSettings) {
            return;
          }
          if (data.searchPanes === void 0) {
            data.searchPanes = {};
          }
          data.searchPanes.selectionList = _this.s.selectionList;
        });
        this._stateLoadListener();
        table.off("page.dtsps page-nc.dtsps").on("page.dtsps page-nc.dtsps", function(e, s) {
          _this.s.paging = true;
          _this.s.pagingST = true;
          _this.s.page = _this.s.dt.page();
        });
        if (this.s.dt.page.info().serverSide) {
          table.off("preXhr.dtsps").on("preXhr.dtsps", function(e, settings, data) {
            if (settings !== hostSettings) {
              return;
            }
            if (!data.searchPanes) {
              data.searchPanes = {};
            }
            if (!data.searchPanes_null) {
              data.searchPanes_null = {};
            }
            var filterCount = 0;
            for (var _i2 = 0, _a2 = _this.s.panes; _i2 < _a2.length; _i2++) {
              var pane2 = _a2[_i2];
              var src = _this.s.dt.column(pane2.s.index).dataSrc();
              if (!data.searchPanes[src]) {
                data.searchPanes[src] = {};
              }
              if (!data.searchPanes_null[src]) {
                data.searchPanes_null[src] = {};
              }
              if (pane2.s.dtPane) {
                var rowData = pane2.s.dtPane.rows({ selected: true }).data().toArray();
                for (var i = 0; i < rowData.length; i++) {
                  data.searchPanes[src][i] = rowData[i].filter;
                  if (!data.searchPanes[src][i]) {
                    data.searchPanes_null[src][i] = true;
                  }
                  filterCount++;
                }
              }
            }
            if (filterCount > 0) {
              if (filterCount !== _this.s.filterCount) {
                data.start = 0;
                _this.s.page = 0;
              } else {
                data.start = _this.s.page * _this.s.dt.page.len();
              }
              _this.s.dt.page(_this.s.page);
              _this.s.filterCount = filterCount;
            }
            if (_this.s.selectionList.length > 0) {
              data.searchPanesLast = _this.s.dt.column(_this.s.selectionList[_this.s.selectionList.length - 1].column).dataSrc();
            }
            data.searchPanes_options = {
              cascade: _this.c.cascadePanes,
              viewCount: _this.c.viewCount,
              viewTotal: _this.c.viewTotal
            };
          });
        } else {
          table.on("preXhr.dtsps", function() {
            return _this.s.panes.forEach(function(pane2) {
              return pane2.clearData();
            });
          });
        }
        this.s.dt.on("xhr.dtsps", function(e, settings) {
          if (settings.nTable !== _this.s.dt.table().node()) {
            return;
          }
          if (!_this.s.dt.page.info().serverSide) {
            var processing_1 = false;
            _this.s.dt.one("preDraw.dtsps", function() {
              if (processing_1) {
                return;
              }
              var page = _this.s.dt.page();
              processing_1 = true;
              _this.s.updating = true;
              _this.dom.panes.empty();
              for (var _i2 = 0, _a2 = _this.s.panes; _i2 < _a2.length; _i2++) {
                var pane2 = _a2[_i2];
                pane2.clearData();
                pane2.rebuildPane(void 0, true);
                _this.dom.panes.append(pane2.dom.container);
              }
              if (!_this.s.dt.page.info().serverSide) {
                _this.s.dt.draw();
              }
              _this.s.updating = false;
              _this._updateSelection();
              _this._checkMessage();
              _this.s.dt.one("draw.dtsps", function() {
                _this.s.updating = true;
                _this.s.dt.page(page).draw(false);
                _this.s.updating = false;
              });
            });
          }
        });
        var selectList = this.c.preSelect;
        if (loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.selectionList) {
          selectList = loadedFilter.searchPanes.selectionList;
        }
        this._makeSelections(selectList);
        this._updateFilterCount();
        table.on("destroy.dtsps", function(e, settings) {
          if (settings !== hostSettings) {
            return;
          }
          for (var _i2 = 0, _a2 = _this.s.panes; _i2 < _a2.length; _i2++) {
            var pane2 = _a2[_i2];
            pane2.destroy();
          }
          table.off(".dtsps");
          _this.dom.showAll.off(".dtsps");
          _this.dom.clearAll.off(".dtsps");
          _this.dom.collapseAll.off(".dtsps");
          $$1(table.table().node()).off(".dtsps");
          _this.dom.container.detach();
          _this.clearSelections();
        });
        if (this.c.collapse) {
          this._setCollapseListener();
        }
        if (this.c.clear) {
          this.dom.clearAll.on("click.dtsps", function() {
            return _this.clearSelections();
          });
        }
        hostSettings._searchPanes = this;
        this.s.dt.state.save();
      };
      SearchPanes2.prototype._updateFilterCount = function() {
        var filterCount = 0;
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.dtPane) {
            filterCount += pane.getPaneCount();
          }
        }
        this.dom.title.html(this.s.dt.i18n("searchPanes.title", this.c.i18n.title, filterCount));
        if (this.c.filterChanged && typeof this.c.filterChanged === "function") {
          this.c.filterChanged.call(this.s.dt, filterCount);
        }
        if (filterCount === 0) {
          this.dom.clearAll.addClass(this.classes.disabledButton).attr("disabled", "true");
        } else {
          this.dom.clearAll.removeClass(this.classes.disabledButton).removeAttr("disabled");
        }
      };
      SearchPanes2.version = "2.2.0";
      SearchPanes2.classes = {
        clear: "dtsp-clear",
        clearAll: "dtsp-clearAll",
        collapseAll: "dtsp-collapseAll",
        container: "dtsp-searchPanes",
        disabledButton: "dtsp-disabledButton",
        emptyMessage: "dtsp-emptyMessage",
        hide: "dtsp-hidden",
        panes: "dtsp-panesContainer",
        search: "dtsp-search",
        showAll: "dtsp-showAll",
        title: "dtsp-title",
        titleRow: "dtsp-titleRow"
      };
      SearchPanes2.defaults = {
        cascadePanes: false,
        clear: true,
        collapse: true,
        columns: [],
        container: function(dt) {
          return dt.table().container();
        },
        filterChanged: void 0,
        i18n: {
          clearMessage: "Clear All",
          clearPane: "&times;",
          collapse: {
            0: "SearchPanes",
            _: "SearchPanes (%d)"
          },
          collapseMessage: "Collapse All",
          count: "{total}",
          emptyMessage: "<em>No data</em>",
          emptyPanes: "No SearchPanes",
          loadMessage: "Loading Search Panes...",
          showMessage: "Show All",
          title: "Filters Active - %d"
        },
        layout: "auto",
        order: [],
        panes: [],
        preSelect: [],
        viewCount: true,
        viewTotal: false
      };
      return SearchPanes2;
    }()
  );
  var __extends = window && window.__extends || function() {
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  var SearchPanesST = (
    /** @class */
    function(_super) {
      __extends(SearchPanesST2, _super);
      function SearchPanesST2(paneSettings, opts, fromPreInit) {
        if (fromPreInit === void 0) {
          fromPreInit = false;
        }
        var _this = this;
        var paneClass;
        if (opts.cascadePanes && opts.viewTotal) {
          paneClass = SearchPaneCascadeViewTotal;
        } else if (opts.cascadePanes) {
          paneClass = SearchPaneCascade;
        } else if (opts.viewTotal) {
          paneClass = SearchPaneViewTotal;
        }
        _this = _super.call(this, paneSettings, opts, fromPreInit, paneClass) || this;
        var dt = _this.s.dt;
        var loadedFilter = dt.state.loaded();
        var loadFn = function() {
          return _this._initSelectionListeners(true, loadedFilter && loadedFilter.searchPanes && loadedFilter.searchPanes.selectionList ? loadedFilter.searchPanes.selectionList : _this.c.preSelect);
        };
        if (dt.settings()[0]._bInitComplete) {
          loadFn();
        } else {
          dt.off("init.dtsps").on("init.dtsps", loadFn);
        }
        return _this;
      }
      SearchPanesST2.prototype._initSelectionListeners = function(isPreselect, preSelect) {
        if (isPreselect === void 0) {
          isPreselect = true;
        }
        if (preSelect === void 0) {
          preSelect = [];
        }
        if (isPreselect) {
          this.s.selectionList = preSelect;
        }
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.displayed) {
            pane.s.dtPane.off("select.dtsp").on("select.dtsp", this._update(pane)).off("deselect.dtsp").on("deselect.dtsp", this._updateTimeout(pane));
          }
        }
        this.s.dt.off("draw.dtsps").on("draw.dtsps", this._update());
        this._updateSelectionList();
      };
      SearchPanesST2.prototype._serverTotals = function() {
        for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
          var pane = _a[_i];
          if (pane.s.colOpts.show) {
            var colTitle = this.s.dt.column(pane.s.index).dataSrc();
            var blockVT = true;
            if (this.s.serverData.searchPanes.options[colTitle]) {
              for (var _b = 0, _c = this.s.serverData.searchPanes.options[colTitle]; _b < _c.length; _b++) {
                var data = _c[_b];
                if (data.total !== data.count) {
                  blockVT = false;
                  break;
                }
              }
            }
            pane.s.filteringActive = !blockVT;
            pane._serverPopulate(this.s.serverData);
          }
        }
      };
      SearchPanesST2.prototype._stateLoadListener = function() {
        var _this = this;
        var stateLoadFunction = function(e, settings, data) {
          if (data.searchPanes === void 0) {
            return;
          }
          _this.s.selectionList = data.searchPanes.selectionList ? data.searchPanes.selectionList : [];
          if (data.searchPanes.panes) {
            for (var _i = 0, _a = data.searchPanes.panes; _i < _a.length; _i++) {
              var loadedPane = _a[_i];
              for (var _b = 0, _c = _this.s.panes; _b < _c.length; _b++) {
                var pane = _c[_b];
                if (loadedPane.id === pane.s.index && pane.s.dtPane) {
                  pane.dom.searchBox.val(loadedPane.searchTerm);
                  pane.s.dtPane.order(loadedPane.order);
                }
              }
            }
          }
          _this._updateSelectionList();
        };
        this.s.dt.off("stateLoadParams.dtsps", stateLoadFunction).on("stateLoadParams.dtsps", stateLoadFunction);
      };
      SearchPanesST2.prototype._updateSelection = function() {
        return;
      };
      SearchPanesST2.prototype._update = function(pane) {
        var _this = this;
        if (pane === void 0) {
          pane = void 0;
        }
        return function() {
          if (pane) {
            clearTimeout(pane.s.deselectTimeout);
          }
          _this._updateSelectionList(pane);
        };
      };
      SearchPanesST2.prototype._updateTimeout = function(pane) {
        var _this = this;
        if (pane === void 0) {
          pane = void 0;
        }
        return function() {
          return pane ? pane.s.deselectTimeout = setTimeout(function() {
            return _this._updateSelectionList(pane);
          }, 50) : _this._updateSelectionList();
        };
      };
      SearchPanesST2.prototype._updateSelectionList = function(paneIn) {
        if (paneIn === void 0) {
          paneIn = void 0;
        }
        if (this.s.pagingST) {
          this.s.pagingST = false;
          return;
        } else if (this.s.updating || paneIn && paneIn.s.serverSelecting) {
          return;
        }
        if (paneIn !== void 0) {
          if (this.s.dt.page.info().serverSide) {
            paneIn._updateSelection();
          }
          var rows = paneIn.s.dtPane.rows({ selected: true }).data().toArray().map(function(el) {
            return el.filter;
          });
          this.s.selectionList = this.s.selectionList.filter(function(selection) {
            return selection.column !== paneIn.s.index;
          });
          if (rows.length > 0) {
            this.s.selectionList.push({
              column: paneIn.s.index,
              rows
            });
            paneIn.dom.clear.removeClass(this.classes.disabledButton).removeAttr("disabled");
          } else {
            paneIn.dom.clear.addClass(this.classes.disabledButton).attr("disabled", "true");
          }
          if (this.s.dt.page.info().serverSide) {
            this.s.dt.draw(false);
          }
        }
        this._remakeSelections();
        this._updateFilterCount();
      };
      SearchPanesST2.prototype._remakeSelections = function() {
        this.s.updating = true;
        if (!this.s.dt.page.info().serverSide) {
          var tmpSL = this.s.selectionList;
          var anotherFilter = false;
          this.clearSelections();
          this.s.dt.draw(false);
          if (this.s.dt.rows().toArray()[0].length > this.s.dt.rows({ search: "applied" }).toArray()[0].length) {
            anotherFilter = true;
          }
          this.s.selectionList = tmpSL;
          for (var _i = 0, _a = this.s.panes; _i < _a.length; _i++) {
            var pane = _a[_i];
            if (pane.s.displayed) {
              pane.s.filteringActive = anotherFilter;
              pane.updateRows();
            }
          }
          for (var _b = 0, _c = this.s.selectionList; _b < _c.length; _b++) {
            var selection = _c[_b];
            var pane = void 0;
            for (var _d = 0, _e = this.s.panes; _d < _e.length; _d++) {
              var paneCheck = _e[_d];
              if (paneCheck.s.index === selection.column) {
                pane = paneCheck;
                break;
              }
            }
            if (!pane.s.dtPane) {
              continue;
            }
            var ids = pane.s.dtPane.rows().indexes().toArray();
            for (var i = 0; i < selection.rows.length; i++) {
              var rowFound = false;
              for (var _f = 0, ids_1 = ids; _f < ids_1.length; _f++) {
                var id = ids_1[_f];
                var currRow = pane.s.dtPane.row(id);
                var data = currRow.data();
                if (selection.rows[i] === data.filter) {
                  currRow.select();
                  rowFound = true;
                }
              }
              if (!rowFound) {
                selection.rows.splice(i, 1);
                i--;
              }
            }
            pane.s.selections = selection.rows;
            if (selection.rows.length === 0) {
              continue;
            }
            this.s.dt.draw(false);
            var filteringActive = false;
            var filterCount = 0;
            var prevSelectedPanes = 0;
            var selectedPanes = 0;
            for (var _g = 0, _h = this.s.panes; _g < _h.length; _g++) {
              var currPane = _h[_g];
              if (currPane.s.dtPane) {
                filterCount += currPane.getPaneCount();
                if (filterCount > prevSelectedPanes) {
                  selectedPanes++;
                  prevSelectedPanes = filterCount;
                }
              }
            }
            filteringActive = filterCount > 0;
            for (var _j = 0, _k = this.s.panes; _j < _k.length; _j++) {
              var currPane = _k[_j];
              if (currPane.s.displayed) {
                if (anotherFilter || pane.s.index !== currPane.s.index || !filteringActive) {
                  currPane.s.filteringActive = filteringActive || anotherFilter;
                } else if (selectedPanes === 1) {
                  currPane.s.filteringActive = false;
                }
                if (currPane.s.index !== pane.s.index) {
                  currPane.updateRows();
                }
              }
            }
          }
          this.s.dt.draw(false);
        } else {
          var pane = void 0;
          if (this.s.selectionList.length > 0) {
            pane = this.s.panes[this.s.selectionList[this.s.selectionList.length - 1].column];
          }
          for (var _l = 0, _m = this.s.panes; _l < _m.length; _l++) {
            var currPane = _m[_l];
            if (currPane.s.displayed && (!pane || currPane.s.index !== pane.s.index)) {
              currPane.updateRows();
            }
          }
        }
        this.s.updating = false;
      };
      return SearchPanesST2;
    }(SearchPanes)
  );
  setJQuery$4($);
  setJQuery($);
  setJQuery$3($);
  setJQuery$2($);
  setJQuery$1($);
  var dataTable = $.fn.dataTable;
  dataTable.SearchPanes = SearchPanes;
  jquery_dataTables_default.SearchPanes = SearchPanes;
  dataTable.SearchPanesST = SearchPanesST;
  jquery_dataTables_default.SearchPanesST = SearchPanesST;
  dataTable.SearchPane = SearchPane;
  jquery_dataTables_default.SearchPane = SearchPane;
  dataTable.SearchPaneViewTotal = SearchPaneViewTotal;
  jquery_dataTables_default.SearchPaneViewTotal = SearchPaneViewTotal;
  dataTable.SearchPaneCascade = SearchPaneCascade;
  jquery_dataTables_default.SearchPaneCascade = SearchPaneCascade;
  dataTable.SearchPaneCascadeViewTotal = SearchPaneCascadeViewTotal;
  jquery_dataTables_default.SearchPaneCascadeViewTotal = SearchPaneCascadeViewTotal;
  var apiRegister = $.fn.dataTable.Api.register;
  apiRegister("searchPanes()", function() {
    return this;
  });
  apiRegister("searchPanes.clearSelections()", function() {
    return this.iterator("table", function(ctx) {
      if (ctx._searchPanes) {
        ctx._searchPanes.clearSelections();
      }
    });
  });
  apiRegister("searchPanes.rebuildPane()", function(targetIdx, maintainSelections) {
    return this.iterator("table", function(ctx) {
      if (ctx._searchPanes) {
        ctx._searchPanes.rebuild(targetIdx, maintainSelections);
      }
    });
  });
  apiRegister("searchPanes.resizePanes()", function() {
    var ctx = this.context[0];
    return ctx._searchPanes ? ctx._searchPanes.resizePanes() : null;
  });
  apiRegister("searchPanes.container()", function() {
    var ctx = this.context[0];
    return ctx._searchPanes ? ctx._searchPanes.getNode() : null;
  });
  jquery_dataTables_default.ext.buttons.searchPanesClear = {
    action: function(e, dt) {
      dt.searchPanes.clearSelections();
    },
    text: "Clear Panes"
  };
  jquery_dataTables_default.ext.buttons.searchPanes = {
    action: function(e, dt, node, config) {
      var _this = this;
      if (!config._panes) {
        this.processing(true);
        setTimeout(function() {
          _buttonSourced(dt, node, config);
          _this.popover(config._panes.getNode(), {
            align: "container",
            span: "container"
          });
          config._panes.rebuild(void 0, true);
          _this.processing(false);
        }, 10);
      } else {
        this.popover(config._panes.getNode(), {
          align: "container",
          span: "container"
        });
        config._panes.rebuild(void 0, true);
      }
    },
    init: function(dt, node, config) {
      dt.button(node).text(config.text || dt.i18n("searchPanes.collapse", "SearchPanes", 0));
      if (dt.init().stateSave) {
        _buttonSourced(dt, node, config);
      }
    },
    config: {},
    text: ""
  };
  function _buttonSourced(dt, node, config) {
    var buttonOpts = $.extend({
      filterChanged: function(count) {
        dt.button(node).text(dt.i18n("searchPanes.collapse", dt.context[0].oLanguage.searchPanes !== void 0 ? dt.context[0].oLanguage.searchPanes.collapse : dt.context[0]._searchPanes.c.i18n.collapse, count));
      }
    }, config.config);
    var panes = buttonOpts && (buttonOpts.cascadePanes || buttonOpts.viewTotal) ? new jquery_dataTables_default.SearchPanesST(dt, buttonOpts) : new jquery_dataTables_default.SearchPanes(dt, buttonOpts);
    dt.button(node).text(config.text || dt.i18n("searchPanes.collapse", panes.c.i18n.collapse, 0));
    config._panes = panes;
  }
  function _init(settings, options, fromPre) {
    if (options === void 0) {
      options = null;
    }
    if (fromPre === void 0) {
      fromPre = false;
    }
    var api = new dataTable.Api(settings);
    var opts = options ? options : api.init().searchPanes || dataTable.defaults.searchPanes;
    var searchPanes = opts && (opts.cascadePanes || opts.viewTotal) ? new SearchPanesST(api, opts, fromPre) : new SearchPanes(api, opts, fromPre);
    var node = searchPanes.getNode();
    return node;
  }
  $(document).on("preInit.dt.dtsp", function(e, settings) {
    if (e.namespace !== "dt") {
      return;
    }
    if (settings.oInit.searchPanes || jquery_dataTables_default.defaults.searchPanes) {
      if (!settings._searchPanes) {
        _init(settings, null, true);
      }
    }
  });
  jquery_dataTables_default.ext.feature.push({
    cFeature: "P",
    fnInit: _init
  });
  if (jquery_dataTables_default.ext.features) {
    jquery_dataTables_default.ext.features.register("searchPanes", _init);
  }
})();

// node_modules/datatables.net-searchpanes-bs5/js/searchPanes.bootstrap5.mjs
var $2 = import_jquery2.default;
$2.extend(true, dataTables_bootstrap5_default.SearchPane.classes, {
  buttonGroup: "btn-group",
  disabledButton: "disabled",
  narrow: "col",
  pane: {
    container: "table"
  },
  paneButton: "btn btn-subtle",
  pill: "badge rounded-pill bg-secondary",
  search: "form-control search",
  table: "table table-sm table-borderless",
  topRow: "dtsp-topRow"
});
$2.extend(true, dataTables_bootstrap5_default.SearchPanes.classes, {
  clearAll: "dtsp-clearAll btn btn-subtle",
  collapseAll: "dtsp-collapseAll btn btn-subtle",
  container: "dtsp-searchPanes",
  disabledButton: "disabled",
  panes: "dtsp-panes dtsp-panesContainer",
  search: dataTables_bootstrap5_default.SearchPane.classes.search,
  showAll: "dtsp-showAll btn btn-subtle",
  title: "dtsp-title",
  titleRow: "dtsp-titleRow"
});
var searchPanes_bootstrap5_default = dataTables_bootstrap5_default;
export {
  searchPanes_bootstrap5_default as default
};
/*! Bundled license information:

datatables.net-searchpanes/js/dataTables.searchPanes.mjs:
  (*! SearchPanes 2.2.0
   * © SpryMedia Ltd - datatables.net/license
   *)

datatables.net-searchpanes-bs5/js/searchPanes.bootstrap5.mjs:
  (*! Bootstrap 5 integration for DataTables' SearchPanes
   * © SpryMedia Ltd - datatables.net/license
   *)
*/
//# sourceMappingURL=datatables__net-searchpanes-bs5.js.map
